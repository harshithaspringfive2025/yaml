name: Build and Deploy Changed Mule Projects

on:
  push:
    branches:
      - main
    paths:
      - '**'
  workflow_dispatch:

jobs:
  get_changed_projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.detect.outputs.projects }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Detect changed MuleSoft projects
        id: detect
        run: |
          echo "Detecting changed MuleSoft projects..."

          BASE_SHA="${{ github.event.before }}"
          if [[ -z "$BASE_SHA" || "$BASE_SHA" == "0000000000000000000000000000000000000000" ]]; then
            BASE_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          HEAD_SHA="${{ github.sha }}"

          echo "Comparing $BASE_SHA -> $HEAD_SHA"
          changed_dirs=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | cut -d/ -f1 | sort -u)

          echo "Changed directories:"
          echo "$changed_dirs"

          valid_projects=()
          for dir in $changed_dirs; do
            if [[ -f "$dir/pom.xml" ]]; then
              echo "Including project: $dir"
              valid_projects+=("\"$dir\"")
            fi
          done

          if [ ${#valid_projects[@]} -eq 0 ]; then
            echo "projects=[]" >> $GITHUB_OUTPUT
          else
            json_output="[$(IFS=,; echo "${valid_projects[*]}")]"
            echo "projects=$json_output" >> $GITHUB_OUTPUT
          fi

  build_and_deploy:
    needs: get_changed_projects
    if: ${{ needs.get_changed_projects.outputs.projects != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.get_changed_projects.outputs.projects) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Build Mule Project - ${{ matrix.project }}
        run: |
          cd "${{ matrix.project }}"
          mvn clean package -DskipTests

      - name: Debug target contents - ${{ matrix.project }}
        run: |
          echo "Checking built files..."
          if [ ! -d "${{ matrix.project }}/target" ]; then
            echo "❌ No target directory found. Build failed."
            exit 1
          fi
          ls -la "${{ matrix.project }}/target"

      - name: Deploy to CloudHub - ${{ matrix.project }}
        env:
          USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
          PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
          ENVIRONMENT: ${{ secrets.ANYPOINT_ENVIRONMENT }}
          REGION: ${{ secrets.ANYPOINT_REGION }}
        run: |
          cd "${{ matrix.project }}"
          
          # Detect the deployable JAR (ignore "original-" artifacts)
          artifact=$(ls target/*.jar 2>/dev/null | grep -v "original" | head -1)

          if [[ -z "$artifact" ]]; then
            echo "❌ No deployable artifact found in target/"
            ls -la target/
            exit 1
          fi

          echo "✅ Found artifact: $artifact"

          # Deploy with all required Anypoint properties
          mvn deploy -DmuleDeploy \
            -Danypoint.username="$USERNAME" \
            -Danypoint.password="$PASSWORD" \
            -Danypoint.environment="$ENVIRONMENT" \
            -Danypoint.region="$REGION" \
            -DskipTests -X


